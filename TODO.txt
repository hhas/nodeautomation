# TO DOs


## GENERAL

- What special JS methods do Specifier proxies need to handle? Currently handles:

		Symbol.toPrimitive
		util.inspect.custom
		"toString"
		Symbol.toStringTag
		"valueOf"
		"constructor"

- IMPORTANT: where are autorelease pools required?

- check NSError** args are refd and derefd correctly (note that buffer.deref() seems to fail if nilptr)


## aeappdata

- See file for various TODOs (there's a lot)

- confirm JS bitwise operators in readIgnoringOptions() always treat numbers as UInt32 (they seem to do)


## aedefaultterminology

- review built-in terms against current AppleScript AEUT (Q. how much has AS changed/how much do we care? A. not a lot)


## aeselectors

- check specifier proxy: does it make any difference if property or elements name is checked for first, e.g. where ambiguous terminology means the same name is used for both (e.g. when nouns whose singular and plural forms are the same; 'text' being an obvious example, except that it's already special cased; have a feeling appscript terminology parser gave precedence to one, probably intentionally) [see also TODO for aegluetable on resolving ambiguous property+elements names]

- Add a `Specifier.every` attribute for explicitly indicating a conflicting property/elements name should construct an all-elements specifier, not property specifier (the default)? One minor issue with this: it does make for some ugly syntax when subsequently applying a selector to it, e.g. `character.every.at(1)`. TBH, appscript did go years without anyone running into an explicit need for it, so inclined to leave out (it is a reserved name, so could always be added in future if concrete need is found).


## aesupport

## aeformatter

- formatter methods should never throw; instead, return opaque representation/NSAppleEventDescriptor description

- other TODOs in file


## aegluetable

- should `convertNameToIdentifier` convert non-C-identifier characters too (currently just trims and converts to camelCase)? Or just leave user to use JS's alternate `[...]` which allows any name to be passed as string?

- review special-case handling of 'text' keyword; is this definitely the only ambiguous property-AND-elements name that should default to elements name? (i.e. appscript behavior)

- confirm export functions' outPath behavior (do both 'fs' and -[NSData write:...] accept relative as well as absolute paths? what errors do they throw if invalid?)

- maxSize for glue cache? (ideally this should discard least used)

